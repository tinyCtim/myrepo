// tiny-c library functions, 2017

// From property file look up name and return value in buff.
// blen is the length of buff. Default is returned if file has
// no entry for name.

getproperty char file(0), name(0), buff(0); int blen; char default(0) [
	return MC file,name,buff,blen,default,116
]

printf char fmt(0); ... [
	MC 101
]

// Put a character to the terminal
putchar char c [
	if(c==0)c='"'
	MC c,1
]

// Get a character from the terminal
getchar [
	return gc
]

// chrdy return true if a character has been typed, else 0 if none
chrdy [
    return MC 12
]

// sleep for n seconds
sleep int n [
	MC n,102
]

// put a block of chars from f to l inclusive
pft char from(0),to(0) [
	MC from,to,13
]

// Read a line from the terminal into buffer as a string
gs char q(0) [ // mod's by Ed Davis
 int x
 x=0
 while( (q(x)=MC(2))!=10 ) [
        if (q(x)==13) break
  if(q(x)==24) [x=0; pl("")]
  else if(q(x)==127) [if(x>0)x=x-1]
  else x=x+1
 ]
 q(x)=0
    pl ""
 return x
]

// put a null terminated string
ps char b(0) [
	MC "%s", b, 101
]

// put a null terminated string as a new line
pl char b(0) [
	MC "%c%s", 10, b, 101
]

// return true if character a is an alpha, else false
alpha char a [
	if(((a>='a')*(a<='z'))) return 1
	if(((a>='A')*(a<='Z'))) return 1
]

// convert a string of digits (without leading sign) to an int, returning the
// result in v. Note v is a pointer to the int. The number of digits examined
// is returned. Either a non digit, or the 11th stops the conversion.
num char b(0); int v(0) [
	int k
	v(0)=0
	while(k<10)[
		if( (b(k)<'0') + (b(k)>'9') ) break;
		v(0) = 10*v(0) + b(k)-'0'
		k = k+1
	]
	return k;
]

// like num, but includes an optional leading blanks and sign
atoi char b(0); int v(0) [
	int k,s
	char c
	s=1
	c=b(0)
	while((c==' ')+(c=='-')+(c=='+')) [
		if(c=='-') s = -1
		c = b(k=k+1)
	]
	k = k+num(b+k,v)
	v(0) = s*v(0)
	return k
]

// converts an int, n, to ascii string in array b. Returns the length of the string.
itoa int n; char b(30) [
	if(n<0)[
		b(0)='-'
		return 1+itoa(-n,b+1)
	]
	if(n<10)[
		b(0)=n+'0'
		return 1
	]
	int k
	b(k=itoa(n/10,b))=n%10+'0'
	b(k+1)=0
	return k+1
]

// print an integer with a leading blank
pn int n [
	MC ' ',1
	MC n,14
]

// get a number from the terminal. Insist on it!
gn [
	char b(20)
	int v(0)
	while(1)[
		gs b
		if(atoi(b,v)) return v(0)
		ps "number required "
	]
]

// compare two strings for equality, returning true if equal, else false.
// Only the first n characters are considered.
ceqn char a(0), b(0); int n [
	int k
	k = -1
	while((k=k+1)<n)[
		if(a(k)!=b(k)) return 0
	]
	return 1
]

strcat char a(0), b(0) [
	return MC a, b, 105
]

strcpy char a(0), b(0) [
	return MC a, b, 106
]

// finds the leftmost copy IN [s1..s1+n1] OF [s2..s2+n2] (memory blocks,
// left inclusive, right exclusive) returning false (0) if no match, else
// the index of the first match character starting with 1 (one). 
index char s1(0); int n1; char s2(0); int n2 [
	if(n2<=0)return 1   // null matches beginning of s1 even if s1 is empty
	if(n1<=0)return 0   // s1 empty
	int a, d(0)
	while( a+n2 <= n1) [
		d(0)=1
		a = a+1+scann(s1+a, s1+n1-n2, s2(0), d )
		if(d(0))return 0
		if(ceqn( s1+a, s2+1, n2-1 ))return a
	]
]

//
move char a(0), b(0) [
	int k
	k = -1
	while(a(k=k+1)!=0)b(k)=a(k)
	b(k)=0
	return k
]

// Reads a line, returns the first character
gc [
	char f
	f = MC 2
	return f
]

// move [a..b] inclusive n bytes, +down (higher addresses)
movebl char a(0), b(0); int n [
	MC a,b,n,7
]

// 
countch char a(0), b(0), c [
	return MC a,b,c,8
]

// scan from 'from' to 'to' for character 'c', decrementing n(0) each 'c' found.
// The scan stops if n(0) is decremented to 0, or when 'to' is reached 
// and examined. Returns the offset from 'from' to the last character examined.
scann char from(0), to(0), c; int n(0) [
	return MC(from, to, c, n, 9)
]

// Read file name into buff of length len returning number of bytes read.
readfile char name(0), buff(0); int len [
	return MC name, buff, len, 103
]

//
writefile char name(0), buff(0); int len [
	return MC name, buff, len, 107
]

fopen char name(0), mode(0) [
	int unit
	unit=MC name,mode,111
	if(unit<0)[
		ps"fopen err "; pn unit
	]
	return unit;
]

fputs char str(0); int unit [
	int code;
	code=MC str,unit,112
	if(code<0)[
		ps"fputs err "; pn code
	]
	return code;
]

fpn int x; int unit [
	fputc ' ',unit
	MC x,unit,118
]
fpn_ns int x; int unit [
	MC x,unit,118
]

fputc char c; int unit [
	int code;
	code=MC c,unit,113
	if(code<0)[
		ps"fputc err "; pn code
	]
	return code;
]

fgets char buff(0); int len, unit [
	int code;
	code=MC buff,len,unit,114
	if(code<0)[
		ps"fgets err "; pn code
	]
	return code;
]
fclose int unit [
	int code;
	code=MC unit,115
	if(code<0)[
		ps"fclose err "; pn code
	]
	return code;
]

strlen char s(0) [
	return MC s,104
]

int seed,last
random int little,big [
  int range
  if(last==0)last=seed=99
  range=big-little+1
  last=last*seed
  if(last<0)last=-last
  return little + (last/8)%range
]

// to stop infinite loops, exits after limit calls
runlimit int limit [
	runhits=runhits+1
	if(running==0)running=runhits=1;
	else if(runhits>limit)exit
]
int runhits, running

// soft exit
exit [ MC 108 ]

// quiet exit
abort [MC 109]

cdate char buff(0) [
	return MC buff,110
]

// system call
system char cmd(0) [
	return MC cmd,117
]

/* test system entry, not used by tc */
_MAIN [
	pl "----tc system level, calling appl main"
	pl""
	main();
	pl "----tc system level, back from main"
]

