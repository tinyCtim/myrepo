
#generated by ChatGPT - mod's by Lee Bradley
#5/27/24

class TreeNode:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.left = None
        self.right = None

class BinarySearchTree:
    def __init__(self):
        self.root = None

    def insert(self, key, value):
        self.root = self._insert_recursively(self.root, key, value)

    def _insert_recursively(self, node, key, value):
        if node is None:
            return TreeNode(key, value)

        if key < node.key:
            node.left = self._insert_recursively(node.left, key, value)
        elif key > node.key:
            node.right = self._insert_recursively(node.right, key, value)
        else:
            node.value = value
        
        return node

    def inorder_traversal(self):
        result = []
        self._inorder_traversal_recursively(self.root, result)
        return result

    def _inorder_traversal_recursively(self, node, result):
        if node is not None:
            self._inorder_traversal_recursively(node.left, result)
            result.append((node.key, node.value))
            self._inorder_traversal_recursively(node.right, result)

# Example usage:
if __name__ == "__main__":
    bst = BinarySearchTree()
    bst.insert("John", 25)
    bst.insert("Alice", 30)
    bst.insert("Bob", 20)
    bst.insert("Eve", 35)
    age = 1
    while age > 0:
        name = input("enter name ")
        age = int(input("enter age (use 0 to quit) "))
        if age > 0:
            bst.insert(name, age)

    print("Records in alphabetical order:")
    for key, value in bst.inorder_traversal():
        print(key, value) 

# This program defines a binary search tree where each node contains a key
# (in this case, a person's name) and a value (such as their age). The insert
# method is used to insert records into the tree while maintaining the alphabetical
# order of the keys. The inorder_traversal method is used to traverse the tree in order,
# which effectively gives you the records sorted alphabetically by key.

